{"version":3,"sources":["GameView.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\script","sourcesContent":["\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class GameView extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    PlayerName: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    PlayerMoney: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    PhaseLabel: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    Time: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    PlayerDBet: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    PlayerDrBet: cc.Label = null;\r\n\r\n    @property(cc.Label)\r\n    PlayerTBet: cc.Label = null;\r\n\r\n    @property(cc.Prefab)\r\n    CardPrefab: cc.Prefab = null;\r\n\r\n    @property(cc.Button)\r\n    BetButtons: cc.Button[] = [null, null, null];\r\n\r\n    @property(cc.Node)\r\n    ChipButtonLabel: cc.Node[] = [null, null, null, null, null]\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        this.register_evnet();\r\n    }\r\n\r\n    // start() { }\r\n    register_evnet() {\r\n        let self = this;\r\n        cc.game.on(\"changePhaseLabel\",\r\n            /**\r\n             * change phase label to current phase\r\n             * @param n recive phase name\r\n             */\r\n            function changePhaseLabel(n: string) {\r\n                self.PhaseLabel.string = n;\r\n            })\r\n\r\n        cc.game.on(\"clearCard\",\r\n            /**\r\n             * destory all displayed card\r\n             */\r\n            function clearCard() {\r\n                let childs: cc.Node[] = self.node.children;\r\n                childs.forEach(element => {\r\n                    element.destroy();\r\n                });\r\n            })\r\n\r\n        cc.game.on(\"setName\",\r\n\r\n            /**\r\n             * set player's name label\r\n             * @param n recive player's name\r\n             */\r\n            function setName(n: string) {\r\n                self.PlayerName.string = n;\r\n            })\r\n\r\n        cc.game.on(\"updateMoney\",\r\n\r\n            /**\r\n             * update player's money\r\n             * @param money recive player's money\r\n             */\r\n            function updateMoney(money: number) {\r\n                self.PlayerMoney.string = money.toString();\r\n            })\r\n\r\n        cc.game.on(\"updateTime\",\r\n\r\n            /**\r\n             * update current phase's time\r\n             * @param n recive remaining time\r\n             */\r\n\r\n            function updateTime(n: number) {\r\n\r\n                self.Time.string = (+n).toString();\r\n            })\r\n\r\n        cc.game.on(\"playerBetDisplay\",\r\n\r\n\r\n            function playerBetDisplay(area: number, bet: number) {\r\n                switch (+area) {\r\n                    case 0:\r\n                        self.PlayerDBet.string = bet.toString();\r\n                        break;\r\n                    case 1:\r\n                        self.PlayerDrBet.string = bet.toString();\r\n                        break;\r\n                    case 2:\r\n                        self.PlayerTBet.string = bet.toString();\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n\r\n        cc.game.on(\"drawCard\", function drawCard(cards: number[]) {\r\n            let spacing = -150;\r\n            for (let index = 0; index < 2; index++) {\r\n                let newcard = cc.instantiate(self.CardPrefab);\r\n                self.node.addChild(newcard);\r\n                newcard.getComponent('card').setNum(cards[index]);\r\n                newcard.setPosition(spacing, 210);\r\n\r\n                spacing += 300;\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    // update (dt) {}\r\n\r\n\r\n    /**\r\n     * draw cards form prefab by card's length times\r\n     * @param cards recive card number array from server\r\n     */\r\n    public drawCard(cards: number[]) {\r\n        let spacing = -150;\r\n        for (let index = 0; index < 2; index++) {\r\n            let newcard = cc.instantiate(this.CardPrefab);\r\n            this.node.addChild(newcard);\r\n            newcard.getComponent('card').setNum(cards[index]);\r\n            newcard.setPosition(spacing, 210);\r\n\r\n            spacing += 300;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * change chipbutton's label color by player select to red,\r\n     * and reset other's to black\r\n     * @param event recive button event\r\n     * @param n recive button's number for array index\r\n     */\r\n    public hightLightChip(event, n: number) {\r\n        this.ChipButtonLabel.forEach(element => {\r\n            element.color = cc.color(0, 0, 0, 255);\r\n        });\r\n        this.ChipButtonLabel[+n].color = cc.color(255, 0, 0, 255);\r\n    }\r\n\r\n\r\n}\r\n"]}